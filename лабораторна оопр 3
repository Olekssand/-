інтерфейс Стратегія є
	    метод execute(a, b)
	

	// Кожна конкретна стратегія реалізує загальний інтерфейс у своєму
	// власний спосіб.
	клас ConcreteStrategyAdd реалізує Strategy is
	    метод execute(a, b) є
	        повернути a + b
	

	клас ConcreteStrategySubtract реалізує Strategy is
	    метод execute(a, b) є
	        повернути a - b
	

	клас ConcreteStrategyMultiply реалізує Strategy is
	    метод execute(a, b) є
	        повернути a * b
	

	// Контекст завжди працює зі стратегіями через загальний
	// інтерфейс. Він не знає, яку саме стратегію йому подано.
	Контекст класу є
	    приватна стратегія: Стратег
	

	    Метод setStrategy(стратегія стратегії) є
	        this.strategy = стратегія
	

	    метод executeStrategy(int a, int b) є
	        return strategy.execute(a, b)
	

	

	// Конкретна стратегія вибирається на більш високому рівні,
	// наприклад, конфігуратором у всій програмі. Готовий об'єкт-
	// стратегія подається до клієнтського об'єкта, а потім може
	// бути замінений іншою стратегією, в будь-який момент, «на
	// лету».
	Клас ExampleApplication є
	    метод main() є
	        // 1. Створити об'єкт контексту.
	        // 2. Ввести перше число (n1).
	        // 3. Ввести друге число (n2).
	        // 4. Ввести бажану операцію.
	        // 5. Потім, звернути стратегію:
	

	        if (дія == додавання) then
	            context.setStrategy(новий ConcreteStrategyAdd())
	

	        якщо (дія == віднімання), то
	            context.setStrategy(новий ConcreteStrategySubtract())
	

	        if (дія == множення) then
	            context.setStrategy(new ConcreteStrategyMultiply())
	

	        // 6. Виконати операцію за допомогою стратегії:
	        результат = context.executeStrategy(n1, n2)

